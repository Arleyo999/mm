#!/usr/bin/env node
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var spawn = require('child_process').spawnSync;

var filesToCheck = '*.js';
var FORMAT_START = process.env.FORMAT_START || 'main';

function main(args) {
  var fix = false;

  while (args.length > 0) {
    switch (args[0]) {
      case '-f':
      case '--fix':
        fix = true;
        break;

      default:
    }

    args.shift();
  } // Check js files that change on unstaged file


  var fileUnStaged = spawn('git', ['diff', '--name-only', FORMAT_START, filesToCheck], {
    encoding: 'utf-8'
  }); // Check js files that change on staged file

  var fileStaged = spawn('git', ['diff', '--name-only', '--cached', FORMAT_START, filesToCheck], {
    encoding: 'utf-8'
  });
  var options = [].concat(_toConsumableArray(fileStaged.stdout.split('\n').filter(function (f) {
    return f !== '';
  })), _toConsumableArray(fileUnStaged.stdout.split('\n').filter(function (f) {
    return f !== '';
  })));

  if (fix) {
    options.push('--fix');
  }

  var result = spawn('node_modules/.bin/eslint', _toConsumableArray(options), {
    encoding: 'utf-8'
  });

  if (result.status === 1) {
    console.error('Eslint error:', result.stdout);
    var fixCmd = 'npm run lint:fix';
    console.error("ERROR: please run \"".concat(fixCmd, "\" to format changes in your commit\n    Note that when running the command locally, please keep your local\n    main branch and working branch up to date with nodejs/node-addon-api\n    to exclude un-related complains.\n    Or you can run \"env FORMAT_START=upstream/main ").concat(fixCmd, "\".\n    Also fix JS files by yourself if necessary."));
    return 1;
  }

  if (result.stderr) {
    console.error('Error running eslint:', result.stderr);
    return 2;
  }
}

if (require.main === module) {
  process.exitCode = main(process.argv.slice(2));
}